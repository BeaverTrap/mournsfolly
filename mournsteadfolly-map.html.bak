<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mournstead Folly Map</title>

    <!-- Leaflet CSS and JavaScript for map functionality -->
	<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
	<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css">


    <!-- Styles for map and UI elements -->
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: Arial, sans-serif;
            background-color: #2c2f33;
            color: #f0f0f0;
        }
        #map {
            height: 90vh; /* Map takes up 90% of viewport height */
            width: 95%; /* Map spans 95% of page width */
            margin: 20px auto; /* Center the map */
            border: 2px solid #444; /* Add border for styling */
            border-radius: 8px; /* Rounded corners */
        }
        .category-controls {
            display: flex; /* Arrange icons in a vertical list */
            flex-direction: column;
            background: rgba(255, 255, 255, 0.8); /* Semi-transparent white background */
            border-radius: 8px;
            padding: 5px;
            box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.3); /* Subtle shadow for effect */
        }
        .category-icon {
            margin: 5px; /* Space around icons */
            cursor: pointer; /* Pointer cursor to show interactivity */
            transition: transform 0.2s; /* Smooth scaling on hover */
        }
        .category-icon img {
            width: 40px; /* Set icon width */
            height: 40px; /* Set icon height */
            display: block;
        }
        .category-icon.active img {
            border: 2px solid #0078ff; /* Add blue border to active icons */
            border-radius: 8px;
        }
        .category-icon:hover {
            transform: scale(1.1); /* Slightly enlarge icon on hover */
        }
        .category-icon:hover::after {
            content: attr(data-label); /* Tooltip shows the value of the "data-label" attribute */
            position: absolute;
            top: 50%; /* Center tooltip vertically */
            left: -110%; /* Position tooltip to the left of the icon */
            background-color: rgba(0, 0, 0, 0.8); /* Dark background for tooltip */
            color: white; /* White text for visibility */
            padding: 3px 6px; /* Add padding for readability */
            border-radius: 4px; /* Rounded corners for tooltip */
            white-space: nowrap; /* Prevent text wrapping */
            transform: translateY(-50%); /* Correct vertical alignment */
            font-size: 12px; /* Small font size */
            pointer-events: none; /* Tooltip does not interfere with clicks */
            z-index: 2000; /* Ensure tooltip is above all elements */
        }
    </style>
</head>
<body>
    <h1 style="text-align: center;">Mournstead Folly Map</h1>
    <div id="map"></div>
	

<script>
document.addEventListener("DOMContentLoaded", function () {
    // Initialize Leaflet map with a simple CRS (Coordinate Reference System)
    const map = L.map("map", {
        crs: L.CRS.Simple, // Use simple coordinates for an image map
        minZoom: -2, // Minimum zoom level
        maxZoom: 2, // Maximum zoom level
    });
console.log("Map initialized:", map); // Ensure map is valid
    // Define the bounds of the map to match the image dimensions
    const bounds = [[0, 0], [3508, 4961]]; // Example: 3508x4961 pixels for the map image
    map.setView([943, 3234], -1); // Initial view position and zoom

    // Create panes to layer different map elements with z-index for stacking order
    map.createPane("backgroundPane").style.zIndex = 100;
    map.createPane("districtPane").style.zIndex = 200;
    map.createPane("buildingPane").style.zIndex = 300;
    map.createPane("roadPane").style.zIndex = 400;
    map.createPane("streetPane").style.zIndex = 500;
    map.createPane("streetNamePane").style.zIndex = 600;
    map.createPane("treePane").style.zIndex = 700;
    map.createPane("namesPane").style.zIndex = 800;
    map.createPane("numbersPane").style.zIndex = 900;
    map.createPane("markerPane").style.zIndex = 1000;

    // Add map layers as image overlays for different elements
    const backgroundLayer = L.imageOverlay("./static/images/MF_map_bckgrnd.png", bounds, {
        pane: "backgroundPane",
    }).addTo(map); // Add by default

    const districtLayer = L.imageOverlay("./static/images/MF_map_district.png", bounds, {
        pane: "districtPane",
    });

    const roadLayer = L.imageOverlay("./static/images/MF_map_road.png", bounds, {
        pane: "roadPane",
    }).addTo(map); // Add by default

    const buildingLayer = L.imageOverlay("./static/images/MF_map_buildings.png", bounds, {
        pane: "buildingPane",
    }).addTo(map); // Add by default

    const streetLayer = L.imageOverlay("./static/images/MF_map_streets.png", bounds, {
        pane: "streetPane",
    });

    const streetNameLayer = L.imageOverlay("./static/images/MF_map_streetnames.png", bounds, {
        pane: "streetNamePane",
    });

    const treeLayer = L.imageOverlay("./static/images/MF_map_trees.png", bounds, {
        pane: "treePane",
    });

    const namesLayer = L.imageOverlay("./static/images/MF_map_names.png", bounds, {
        pane: "namesPane",
    });

    const numbersLayer = L.imageOverlay("./static/images/MF_map_numbers.png", bounds, {
        pane: "numbersPane",
    });

    // Create marker groups for different categories
    const residentialLayer = L.layerGroup();
    const businessLayer = L.layerGroup();
    const governmentLayer = L.layerGroup();

    // Add example markers to the groups
    L.marker([1200, 1000], { pane: "markerPane" }).addTo(residentialLayer).bindPopup("<b>Residential Marker</b>");
    L.marker([800, 1200], { pane: "markerPane" }).addTo(businessLayer).bindPopup("<b>Business Marker</b>");
    L.marker([850, 1100], { pane: "markerPane" }).addTo(governmentLayer).bindPopup("<b>Government Marker</b>");

    // Add control container for category icons
    const controlContainer = L.DomUtil.create("div", "category-controls");

    // Define categories with names, icons, and associated layers
    const categories = [
        {
            name: "Residential",
            icon: "./static/images/residents_grey.png",
            layer: residentialLayer,
            turnOnLayers: [districtLayer, streetLayer], // Layers to enable
            turnOffLayers: [roadLayer], // Layers to disable
        },
        {
            name: "Business",
            icon: "./static/images/business_grey.png",
            layer: businessLayer,
        },
        {
            name: "Municipal",
            icon: "./static/images/government_grey.png",
            layer: governmentLayer,
        },
        {
            name: "Trees",
            icon: "./static/images/trees.png",
            layer: treeLayer,
        },
        {
            name: "Names",
            icon: "./static/images/names_grey.png",
            layer: namesLayer,
        },
        {
            name: "Numbers",
            icon: "./static/images/numbers_grey.png",
            layer: numbersLayer,
        },
    ];

    // Function to toggle layers and update icons/tooltips
    const toggleLayer = (layer, iconElement, turnOnLayers = [], turnOffLayers = [], categoryName) => {
        if (map.hasLayer(layer)) {
            // Remove layer if it's active
            map.removeLayer(layer);
            turnOnLayers.forEach((l) => map.removeLayer(l));
            turnOffLayers.forEach((l) => l.addTo(map));
            iconElement.src = iconElement.src.replace(".png", "_grey.png"); // Change icon to inactive
            iconElement.parentElement.setAttribute("data-label", `${categoryName}`); // Reset tooltip
        } else {
            // Add layer if it's inactive
            layer.addTo(map);
            turnOnLayers.forEach((l) => l.addTo(map));
            turnOffLayers.forEach((l) => map.removeLayer(l));
            iconElement.src = iconElement.src.replace("_grey.png", ".png"); // Change icon to active
            iconElement.parentElement.setAttribute("data-label", `${categoryName}`); // Set tooltip
        }
    };

    // Add icons and attach toggle functionality
    categories.forEach((category) => {
        const icon = L.DomUtil.create("div", "category-icon", controlContainer);
        icon.innerHTML = `<img src="${category.icon}" alt="${category.name}" />`;
        icon.setAttribute("data-label", `${category.name}`); // Initial tooltip
        const imgElement = icon.querySelector("img");
        icon.onclick = () =>
            toggleLayer(category.layer, imgElement, category.turnOnLayers || [], category.turnOffLayers || [], category.name);
    });

    // Add control container to the map
    const customControl = L.Control.extend({
        onAdd: function () {
            return controlContainer;
        },
    });
    map.addControl(new customControl({ position: "topright" }));

    // Enable default layers
    backgroundLayer.addTo(map);
    treeLayer.addTo(map);
    roadLayer.addTo(map);
    buildingLayer.addTo(map);
    streetNameLayer.addTo(map);

    // Display coordinates when clicking on the map (for debugging)
    map.on("click", function (e) {
        const { lat, lng } = e.latlng;
        alert(`Coordinates: [${lat.toFixed(2)}, ${lng.toFixed(2)}]`);
    });

    console.log("Map initialized successfully.");
	});
</script>
	

</body>
</html>
